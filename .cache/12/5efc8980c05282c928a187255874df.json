{"id":"shaders/background/fragment.glsl","dependencies":[{"name":"D:\\Web\\Projets\\Project-template\\package.json","includedInParent":true,"mtime":1639730725683}],"generated":{"js":"module.exports = \"precision mediump float;\\n#define GLSLIFY 1\\n\\nuniform float uTime;\\nuniform vec3 color1;\\nuniform vec3 color2;\\n\\nvarying vec2 vUv;\\n\\nfloat random (in vec2 _st) {\\n    return fract(sin(dot(_st.xy,\\n                         vec2(12.9898,78.233)))*\\n        43758.5453123);\\n}\\n\\n// Based on Morgan McGuire @morgan3d\\n// https://www.shadertoy.com/view/4dS3Wd\\nfloat noise (in vec2 _st) {\\n    vec2 i = floor(_st);\\n    vec2 f = fract(_st);\\n\\n    // Four corners in 2D of a tile\\n    float a = random(i);\\n    float b = random(i + vec2(1.0, 0.0));\\n    float c = random(i + vec2(0.0, 1.0));\\n    float d = random(i + vec2(1.0, 1.0));\\n\\n    vec2 u = f * f * (3.0 - 2.0 * f);\\n\\n    return mix(a, b, u.x) +\\n            (c - a)* u.y * (1.0 - u.x) +\\n            (d - b) * u.x * u.y;\\n}\\n\\n#define NUM_OCTAVES 5\\n\\nfloat fbm(in vec2 strength) {\\n    float v = 0.0;\\n    float a = 0.5;\\n    vec2 shift = vec2(100.0);\\n\\n     mat2 rot = mat2(cos(0.5), sin(0.5),\\n                    -sin(0.5), cos(0.50));\\n    for (int i = 0; i < NUM_OCTAVES; ++i) {\\n        v += a * noise(strength);\\n        strength = rot * strength * 2.0 + shift;\\n        a *= 0.5;\\n    }\\n    return v;\\n}\\n\\nvoid main() {\\n    vec3 color = vec3(0.0, 0.0, 0.0);\\n    vec2 strength = vUv;\\n\\n    vec2 q = vec2(0.0);\\n    q.x = fbm(strength);\\n    q.y = fbm(strength + vec2(1.0));\\n\\n    vec2 r = vec2(0.0);\\n    r.x = fbm(strength + q + uTime * 0.05);\\n    r.y = fbm(strength + q + uTime * 0.05);\\n\\n    float f = fbm(strength + r);\\n\\n    color = mix(color1,\\n                color2,\\n                clamp((f*f)*4.0,0.0,1.0));\\n\\n    color = mix(color,\\n                vec3(0.0),\\n                clamp(length(q),0.0,1.0));\\n\\n    gl_FragColor = vec4((f*f*f+.6*f*f+.5*f)*color,1.0);\\n}\";"},"sourceMaps":{"js":{"mappings":[{"name":"module","generated":{"line":1,"column":0},"source":"shaders/background/fragment.glsl","original":{"line":1,"column":0}},{"generated":{"line":1,"column":6},"source":"shaders/background/fragment.glsl","original":{"line":1,"column":6}},{"name":"exports","generated":{"line":1,"column":7},"source":"shaders/background/fragment.glsl","original":{"line":1,"column":7}},{"generated":{"line":1,"column":14},"source":"shaders/background/fragment.glsl","original":{"line":1,"column":0}},{"generated":{"line":1,"column":17},"source":"shaders/background/fragment.glsl","original":{"line":1,"column":15}},{"generated":{"line":1,"column":1776},"source":"shaders/background/fragment.glsl","original":{"line":1,"column":0}}],"sources":{"shaders/background/fragment.glsl":"module.exports=\"precision mediump float;\\n#define GLSLIFY 1\\n\\nuniform float uTime;\\nuniform vec3 color1;\\nuniform vec3 color2;\\n\\nvarying vec2 vUv;\\n\\nfloat random (in vec2 _st) {\\n    return fract(sin(dot(_st.xy,\\n                         vec2(12.9898,78.233)))*\\n        43758.5453123);\\n}\\n\\n// Based on Morgan McGuire @morgan3d\\n// https://www.shadertoy.com/view/4dS3Wd\\nfloat noise (in vec2 _st) {\\n    vec2 i = floor(_st);\\n    vec2 f = fract(_st);\\n\\n    // Four corners in 2D of a tile\\n    float a = random(i);\\n    float b = random(i + vec2(1.0, 0.0));\\n    float c = random(i + vec2(0.0, 1.0));\\n    float d = random(i + vec2(1.0, 1.0));\\n\\n    vec2 u = f * f * (3.0 - 2.0 * f);\\n\\n    return mix(a, b, u.x) +\\n            (c - a)* u.y * (1.0 - u.x) +\\n            (d - b) * u.x * u.y;\\n}\\n\\n#define NUM_OCTAVES 5\\n\\nfloat fbm(in vec2 strength) {\\n    float v = 0.0;\\n    float a = 0.5;\\n    vec2 shift = vec2(100.0);\\n\\n     mat2 rot = mat2(cos(0.5), sin(0.5),\\n                    -sin(0.5), cos(0.50));\\n    for (int i = 0; i < NUM_OCTAVES; ++i) {\\n        v += a * noise(strength);\\n        strength = rot * strength * 2.0 + shift;\\n        a *= 0.5;\\n    }\\n    return v;\\n}\\n\\nvoid main() {\\n    vec3 color = vec3(0.0, 0.0, 0.0);\\n    vec2 strength = vUv;\\n\\n    vec2 q = vec2(0.0);\\n    q.x = fbm(strength);\\n    q.y = fbm(strength + vec2(1.0));\\n\\n    vec2 r = vec2(0.0);\\n    r.x = fbm(strength + q + uTime * 0.05);\\n    r.y = fbm(strength + q + uTime * 0.05);\\n\\n    float f = fbm(strength + r);\\n\\n    color = mix(color1,\\n                color2,\\n                clamp((f*f)*4.0,0.0,1.0));\\n\\n    color = mix(color,\\n                vec3(0.0),\\n                clamp(length(q),0.0,1.0));\\n\\n    gl_FragColor = vec4((f*f*f+.6*f*f+.5*f)*color,1.0);\\n}\";"},"lineCount":null}},"error":null,"hash":"2fef8f96decd5b023ff72676f8bb3b53","cacheData":{"env":{}}}